From 42dd6f75baa198bbf651c36fb971f1390889a72b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Julian=20R=C3=BCth?= <julian.rueth@fsfe.org>
Date: Fri, 13 Jan 2023 21:58:41 +0200
Subject: [PATCH] Do not use variant which is unsupported on some versions of
 macOS

see https://stackoverflow.com/questions/52310835/xcode-10-call-to-unavailable-function-stdvisit/53868971#53868971
---
 libexactreal/src/real_number_product.cc | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/libexactreal/src/real_number_product.cc b/libexactreal/src/real_number_product.cc
index 1376821..1683896 100644
--- a/libexactreal/src/real_number_product.cc
+++ b/libexactreal/src/real_number_product.cc
@@ -22,7 +22,7 @@
 #include <memory>
 #include <set>
 #include <vector>
-#include <variant>
+#include <boost/variant2/variant.hpp>
 
 #include "../exact-real/real_number.hpp"
 #include "../exact-real/cereal.interface.hpp"
@@ -107,7 +107,7 @@ class Key {
  public:
   struct Hash {
     size_t operator()(const Key& key) const {
-      return std::visit([&](const auto& data) -> size_t {
+      return boost::variant2::visit([&](const auto& data) -> size_t {
         return this->operator()(data);
       }, key.data);
     }
@@ -135,7 +135,7 @@ class Key {
   }
 
   bool operator==(const Key& rhs) const {
-    return std::visit([](const auto& lhs, const auto& rhs) -> bool {
+    return boost::variant2::visit([](const auto& lhs, const auto& rhs) -> bool {
       using L = std::decay_t<decltype(lhs)>;
       using R = std::decay_t<decltype(rhs)>;
 
@@ -267,7 +267,7 @@ class Key {
   }
 
   RealNumber* persist() const {
-    return std::visit([&](const auto& data) -> RealNumber* {
+    return boost::variant2::visit([&](const auto& data) -> RealNumber* {
       using T = std::decay_t<decltype(data)>;
       if constexpr (std::is_same_v<T, Factors>) {
         const auto persist = [&](const auto& lhs_monomials, const auto& lhs_exponents, const auto& rhs_monomials, const auto& rhs_exponents) -> RealNumber* {
@@ -399,7 +399,7 @@ class Key {
 
  private:
 
-  mutable std::variant<Factors, MonomialsExponents> data;
+  mutable boost::variant2::variant<Factors, MonomialsExponents> data;
 };
 
 
-- 
2.39.0

